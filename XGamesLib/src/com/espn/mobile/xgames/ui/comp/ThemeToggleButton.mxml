<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" initialize="onInitialized(event)">
	<fx:Metadata>
		[Event(name="selectionChange", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.greensock.easing.Expo;
			
			import mx.events.FlexEvent;
			import mx.graphics.SolidColorStroke;
			
			public static const SELECTION_CHANGE:String = "selectionChange";
			
			[Bindable]
			private var scaleFactor:Number = 1;
			
			private var _selected:Boolean;

			/**
			 * Getter for the selected state
			 **/
			public function get selected():Boolean
			{
				return _selected;
			}

			/**
			 * Setter for setting the selected state
			 **/
			public function set selected(value:Boolean):void
			{
				_selected = value;
				TweenLite.killTweensOf(backgroundOn); 
				TweenLite.killTweensOf(handle);
				TweenLite.killTweensOf(offLabel);
				TweenLite.killTweensOf(onLabel);
				
				if (value)
				{
					TweenLite.to(backgroundOn, 0.3, {alpha:1, ease:Expo.easeOut});
					TweenLite.to(handle, 0.3, {left:backgroundOn.width - handle.width - 3*scaleFactor, ease:Expo.easeOut});
					TweenLite.to(offLabel, 0.3, {alpha:0, ease:Expo.easeOut});
					TweenLite.to(onLabel, 0.3, {alpha:1, ease:Expo.easeOut});
				}
				else 
				{
					TweenLite.to(backgroundOn, 0.3, {alpha:0, ease:Expo.easeOut});
					TweenLite.to(handle, 0.3, {left:3*scaleFactor, ease:Expo.easeOut});
					TweenLite.to(offLabel, 0.3, {alpha:1, ease:Expo.easeOut});
					TweenLite.to(onLabel, 0.3, {alpha:0, ease:Expo.easeOut});
				}
			}

			
			/**
			 * Initialize the component
			 **/
			protected function onInitialized(event:FlexEvent):void
			{
				scaleFactor = getStyle('scaleFactor');
				
			}
			
			protected function onSelectionChange(event:MouseEvent):void
			{
				selected = !selected;
				dispatchEvent(new Event(SELECTION_CHANGE));
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Rect radiusX="{12*scaleFactor}" radiusY="{12*scaleFactor}" width="{72*scaleFactor}" height="{26*scaleFactor}" id="backgroundOff">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x2b2b2b"/>
				<s:GradientEntry color="0x4b4b4b"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<s:Rect radiusX="{12*scaleFactor}" radiusY="{12*scaleFactor}" width="{72*scaleFactor}" height="{26*scaleFactor}" id="backgroundOn" alpha="0">
		<s:fill>
			<s:SolidColor color="{getStyle('themeColor')}"/>
		</s:fill>
	</s:Rect>
	
	<s:Label id="offLabel" text="OFF" verticalCenter="{2*scaleFactor}" right="{10*scaleFactor}" alpha="1" color="0xffffff"/>
	<s:Label id="onLabel" text="ON" verticalCenter="{2*scaleFactor}" left="{13*scaleFactor}" alpha="1" color="0x000000"/>
	
	<s:Group id="handle" verticalCenter="0" left="{3*scaleFactor}">
		<s:Rect radiusX="{10*scaleFactor}" width="{33*scaleFactor}" height="{20*scaleFactor}" id="mainHandle">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xfdfdfd"/>
					<s:GradientEntry color="0x9b9b9b"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:Line left="{13*scaleFactor}" verticalCenter="0" yFrom="0" yTo="6" stroke="{new SolidColorStroke(0x8c8c8c, 1)}"/>
		<s:Line left="{15*scaleFactor}" verticalCenter="0" yFrom="0" yTo="6" stroke="{new SolidColorStroke(0x8c8c8c, 1)}"/>
		<s:Line left="{17*scaleFactor}" verticalCenter="0" yFrom="0" yTo="6" stroke="{new SolidColorStroke(0x8c8c8c, 1)}"/>
		<s:filters>
			<s:DropShadowFilter distance="1" blurX="1" blurY="1" alpha="0.7" angle="90"/>
		</s:filters>
	</s:Group>
		
	<s:Group id="customHitArea" width="100%" height="100%" click="onSelectionChange(event)">
		<s:Rect width="100%" height="100%" fill="{new SolidColor(0x000000)}" alpha="0"/>
	</s:Group>
	
</s:Group>
